========================================================
DIA 1
========================================================

============
CONFIGURAR AMBIENTE DE DESENVOLVIMENTO
============
instalar node.js
instalar editor


===========
NODE
===========
abrir pasta para o projeto (backend)
navegar até a pasta
iniciar o projeto com o comando:
	npm init -y

instalar framework
	npm install express


==========
COMEÇANDO A CODAR
==========
criar arquivo index.js
importando framework:
	const express = require('express');

executar:
	node index.js

==========
REACT
=========
ir para a pasta do projeto
instalar react (executar o framework react-app - npx - x de eXecute)
	npm rm -g create-react-app #remover create-react-app antigo#
	npx create-react-app nomedoprojeto(frontend)

executar:
	npm start
	http://localhost:3000


expo - framework para react native (camera, localização, mapa)



========================================================
DIA 2
========================================================
GET(buscar), POST(criar), PUT(alterar), DELETE(apagar)

https://insomnia.rest/
https://www.postman.com/

Query params: parametros enviados após "?" (Filtros, paginação)
	ex: localhost:3333/users?nome=xxx&idade=yyy
Route params: parametros utilizados para identificar recursos
	ex: localhost:3333/users/1
	ex: app.get('/users/:id', ...)
Request body: corpo da requisição, usado para criar ou alterar recursos
	dados vão por json dentro do body do html


NODEMON - pacote para que o servidor atualize/identifique as alterações realizadas no código, sem precisar reiniciar o server
-D = dependencia de desenvolvedor, ou seja, quando for para produção, não precisa ser instalado essa dependencia
	npm install nodemon -D

package.json > scripts
scripts para executar como comandos, verificar o start para nodemon
	"scripts": {
    	"start": "nodemon src/index.js"
    },
	npm start


===========
BANCO DE DADOS
============
http://knexjs.org/
Query builder: table('users').select('*').where()
	KNEX
Instalação
	npm install knex
	npm install sqlite3
Conexão com o banco
	npx knex init
	configurar o banco em knexfile.js
		tipo de banco
		senhas
		migrations > directory /*migrations são logs de alteração de banco*/

Criação da estrutura do banco
	Criar migration
		npx knex migrate:make create_ongs(nome da migration)
	alterar up e down da migration criada com as tabelas
	Executar migration
		npx knex migrate:latest
	Voltar atras na migration
		npx knex migrate:rollback

=============
Separação em controllers
por convenção cada controller não deve passar de 5 metodos
	listar
	listar 1
	criar
	alterar
	deletar
=============
CORS
colocar modulo de segurança CORS
	npm install cors




========================================================
DIA 3
========================================================
Componente - função do JS que retorna HTML
JSX - Javascript XML
Propriedade - atributos de um elemento de HTML
	ex: <h1 id="titulo1"></h1> id é uma propriedade
Estado - informação que deverá ser mantida pelo componente
Imutabilidade - os objetos não mudam, somente sua referencia, assim, quando se quer alterar o valor de um objeto, substituir ele por um novo objeto com o novo valor
	isso acaba melhorando a performance: "Determinar se um objeto imutável mudou é consideravelmente mais fácil. Se a referência para o objeto atual é diferente da anterior, então o objeto mudou."

Pacote para icones react
	npm install react-icons
	import { FiLogIn } from 'react-icons/fi';
	<FiLogIn size='' color=''/>

==========
ROTAS
===========
Rotas no react
	npm install react-router-dom

se colocar <a></a>, o react vai recarregar toda a página, recarregar todo o react,
por isso em links deve-se utilizar o 'Link to' do react-router-dom

==========
CONEXÃO COM API
===========
instalar cliente http
	npm install axios

por padrão, formulários submit recarregam a página, para combater isso colocar um evento 'e' na função e 'e.preventDefault()'

==============
useState - objetos constantes [valor, função de alteração]
useHistory - serve para navegar para outras rotas do app
useEffect - disparar função por evento
	useEffect(função a ser executada, lista de eventos para a função ser executada)


===================================================
DIA 4
===================================================
Instalar Expo: https://docs.expo.io/versions/latest/
	npm install -g expo-cli
		-g = global, instala uma vez e usa em todos os projetos
	expo -h
Iniciar projeto Expo
	expo init mobile(nome do app)
		template blank
	yarn start  	> localhost:19002
		ler qrcode no app Expo do seu celular (playstore)
		outras opções são:
			simulador (ios/android)
			expo snack

React navigation: https://reactnavigation.org/docs/getting-started
	npm install @react-navigation/native
	expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
	npm install @react-navigation/stack
expo install expo-constants
expo install expo-mail-composer
npm install intl


============================================
DIA 5
============================================
Validação de dados
	celebrate/joi
		npm install celebrate

======
SEGURANÇA
======
https://expressjs.com/pt-br/advanced/best-practice-security.html


======
TESTES
========
TDD
testes de integração e testes unitários
JEST
	npm install jest
	npx jest --init
	executar testes
		npm test

CROSS-ENV
	cria variaveis ambientes
		cross-env NODE_ENV=xxx