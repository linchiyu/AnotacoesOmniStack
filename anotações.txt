========================================================
DIA 1
========================================================

============
CONFIGURAR AMBIENTE DE DESENVOLVIMENTO
============
instalar node.js
instalar editor


===========
NODE
===========
abrir pasta para o projeto (backend)
navegar até a pasta
iniciar o projeto com o comando:
	npm init -y

instalar framework
	npm install express


==========
COMEÇANDO A CODAR
==========
criar arquivo index.js
importando framework:
	const express = require('express');

executar:
	node index.js

==========
REACT
=========
ir para a pasta do projeto
instalar react (executar o framework react-app - npx - x de eXecute)
	npm rm -g create-react-app #remover create-react-app antigo#
	npx create-react-app nomedoprojeto(frontend)

executar:
	npm start
	http://localhost:3000


expo - framework para react native (camera, localização, mapa)



========================================================
DIA 2
========================================================
GET(buscar), POST(criar), PUT(alterar), DELETE(apagar)

https://insomnia.rest/
https://www.postman.com/

Query params: parametros enviados após "?" (Filtros, paginação)
	ex: localhost:3333/users?nome=xxx&idade=yyy
Route params: parametros utilizados para identificar recursos
	ex: localhost:3333/users/1
	ex: app.get('/users/:id', ...)
Request body: corpo da requisição, usado para criar ou alterar recursos
	dados vão por json dentro do body do html


NODEMON - pacote para que o servidor atualize/identifique as alterações realizadas no código, sem precisar reiniciar o server
-D = dependencia de desenvolvedor, ou seja, quando for para produção, não precisa ser instalado essa dependencia
	npm install nodemon -D

package.json > scripts
scripts para executar como comandos, verificar o start para nodemon
	"scripts": {
    	"start": "nodemon src/index.js"
    },
	npm start


===========
BANCO DE DADOS
============
http://knexjs.org/
Query builder: table('users').select('*').where()
	KNEX
Instalação
	npm install knex
	npm install sqlite3
Conexão com o banco
	npx knex init
	configurar o banco em knexfile.js
		tipo de banco
		senhas
		migrations > directory /*migrations são logs de alteração de banco*/

Criação da estrutura do banco
	Criar migration
		npx knex migrate:make create_ongs(nome da migration)
	alterar up e down da migration criada com as tabelas
	Executar migration
		npx knex migrate:latest
	Voltar atras na migration
		npx knex migrate:rollback

=============
Separação em controllers
por convenção cada controller não deve passar de 5 metodos
	listar
	listar 1
	criar
	alterar
	deletar
=============
CORS
colocar modulo de segurança CORS
	npm install cors




========================================================
DIA 3
========================================================
Componente - função do JS que retorna HTML
JSX - Javascript XML
Propriedade - atributos de um elemento de HTML
	ex: <h1 id="titulo1"></h1> id é uma propriedade
Estado - informação que deverá ser mantida pelo componente
Imutabilidade - os objetos não mudam, somente sua referencia, assim, quando se quer alterar o valor de um objeto, substituir ele por um novo objeto com o novo valor
	isso acaba melhorando a performance: "Determinar se um objeto imutável mudou é consideravelmente mais fácil. Se a referência para o objeto atual é diferente da anterior, então o objeto mudou."

tempo 22:59